plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    reobf = false

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', project(":common").file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
    annotationProcessor('org.spongepowered:mixin:0.8.5:processor')
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    runtimeOnly("curse.maven:catalogue-459701:${forge_catalogue_version}")
    runtimeOnly("curse.maven:configured-457570:${forge_configured_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
//    runtimeOnly("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    implementation("curse.maven:cake-chomps-307943:${forge_cake_chomps_version}")
//    implementation("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
//    implementation("dev.architectury:architectury-forge:${architectury_version}")

    // TODO change these back to implementations once updated
    compileOnly("maven.modrinth:jade:${neoforge_jade_version}") // TODO change back to forge version once updated
    compileOnly("maven.modrinth:moonlight:${forge_moonlight_version}")
    compileOnly("maven.modrinth:amendments:${forge_amendments_version}")
    implementation("mysticdrew:common-networking-forge:${networking_version}-${minecraft_version}")
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5") {
        jarJar.ranged(it, "[0.3.5,)")
    })

    compileOnly(testCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(testCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    compileOnly(testCompileOnly("me.shedaniel:RoughlyEnoughItems-neoforge:${rei_version}")) // TODO change back to forge version once updated
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
}

processResources {
    exclude("${mod_id}.accesswidener")
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
