plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
}

base {
    archivesName = "${mod_name}-forge-${minecraft_version}"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', project(":common").file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    runtimeOnly fg.deobf("curse.maven:catalogue-459701:${forge_catalogue_version}")
//    runtimeOnly fg.deobf("curse.maven:configured-457570:${forge_configured_v}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
//    runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    implementation fg.deobf("curse.maven:cake-chomps-307943:${forge_cake_chomps_version}")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("maven.modrinth:jade:${forge_jade_version}")
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.5")) {
        jarJar.ranged(it, "[0.3.5,)")
    }

    compileOnly(testCompileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")))
    compileOnly(testCompileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")))
    compileOnly(testCompileOnly(fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")))
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources

    exclude("${mod_id}.accesswidener")

    inputs.property("version", version)

    filesMatching("META-INF/mods.toml") {
        expand("version": version)
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
