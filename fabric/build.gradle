plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

repositories {
    maven {
        url = "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${minecraft_version}")
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft_version}:${parchment_version}@zip")
    }

    modRuntimeOnly("curse.maven:catalogue-459701:${fabric_catalogue_version}")
//    modRuntimeOnly("curse.maven:configured-457570:${fabric_configured_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
//    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}")

    modImplementation("net.fabricmc:fabric-loader:${fabric_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}+${minecraft_version}")
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")
    modImplementation("curse.maven:cake-chomps-307943:${fabric_cake_chomps_version}")
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}")
    modImplementation("dev.architectury:architectury-fabric:${architectury_version}")
    modImplementation("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${config_port_version}")
    modImplementation("maven.modrinth:jade:${fabric_jade_version}")

    // TODO change these back to implementations once they update
    modCompileOnly("maven.modrinth:moonlight:${fabric_moonlight_version}")
    modCompileOnly("maven.modrinth:amendments:${fabric_amendments_version}")
    modCompileOnly("curse.maven:farmers-delight-refabricated-993166:${fabric_farmers_delight_version}")
    // Temporary implementation of FD neoforge so fabric will compile
    // TODO remove when FD refabricated is updated
    modCompileOnly("curse.maven:farmers-delight-398521:${neoforge_farmers_delight_version}")
    modImplementation("mysticdrew:common-networking-fabric:${networking_version}-${minecraft_version}")

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.5"))
}

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
        }

        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }

        data {
            inherit client
            setConfigName("Fabric Data")
            ideConfigGenerated(true)
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            runDir("runs/data")
        }
    }
}

sourceSets.main.resources { srcDirs += ["src/main/generated"] }

processResources {
    exclude("accesstransformer.cfg")
}
